Последовательность вызовов:
Шаг 0. Пользователь делает запрос, который содержит URL- адрес запроса и, возможно, какие-то данные;
Шаг 1. Все запросы поступают на DispatсherServlet, который обязан перенаправить их конкретному контроллеру. Контроллеров
    может быть много, поэтому DispatcherServlet обращается к другим классам. На основании URL-строки запроса они
    возвращают информацию о классе контроллера и его методе, который необходимо вызвать.
Шаг 2. Происходит вызов метода соответствующего контроллера, который возвращает результат для его отображения клиенту.
Шаг 3. Возвращенный в шаге 2 результат упаковывается в тело ответа и отправляется клиенту.
С помощью такого подхода можно возвращать данные в JSON-формате (рассмотрим далее).

-------------------
НАСТРОЙКА

DispatcherServletConfig - этот класс является обычным JavaConfig, в котором объявляются бины Spring. Разница лишь в том,
    что данные бины относятся к веб-уровню приложения.

    В классе объявлены следующие аннотации:
    @Configuration – указывает на то, что данный класс является конфигурацией;
    @EnableWebMvc – включает поддержку аннотации MVC-компонентов (например, @Controller);
    @ComponentScan – в данном случае указывает на пакет, в котором хранятся классы-контроллеры;
    @Import – указывается класс корневой конфигурации приложения. Благодаря данной аннотации происходит объединение
        контекстов.

    В классе есть два метода:
    - addResourceHandlers(...) – добавляет обработчик ресурсов. Метод принимает объект класса ResourceHandlerRegistry и
        добавляет шаблон пути и локацию. Другими словами, на все запросы /resources/** будет вызываться не контроллер,
        созданный разработчиком, а возвращаться указанный в запросе файл (например, .css или .js);
    - setupViewResolver() – в этом методе создается и настраивается бин, который является тем самым ViewResolver. Вспомним,
        контроллер возвращает только строку имени jsp-страницы, а DispatcherServlet обращается к данному бину, который
        формирует полный путь к представлению, прибавляя к его имени параметры, указанные в методах setPrefix и setSuffix.

WebInitializer - заменяет дискриптор развёртывания web.xml

--------------
@Controller - компонент, задача которого принимать запросы и возвращать имена представлений. Контроллеры – эти бины
    Spring, которые являются синглтонами и предназначены для взаимодествия с пользователем через DispatcherServlet.
(package: spring_mvc.controller)

@RequestMapping
    value - путь метода
    method - get/post

@GetMapping/@PostMapping
@PathVariable/@RequestParam

-------------------
ЗАПУСК

Для запуска сервиса необходимо загрузить Tomcat(либо иное), после чего сконфигурировать запуск приложения в IDE через
него.
