Этапы создания бинов(контекстов):

    1) Производится чтение данных из конфигурационноо файла. На основании данных создаются специальный объекты класса BeanDefinition. Они несут в себе информацию о бинах, которые нужно создать. Эти объекты попадают в BeanFactory.
    2) Настройка созданных объектов класса BeanDefinition.
    3) BeanFactory создает бины, используя информацию, хранящуюся в объектах BeanDefinition. Данный процесс является внутренним процессом Spring, и нет смысла влиять на него. Важно отметить, что на этой стадии бины лишь создаются, но их зависимости еще не удовлетворены.
    4) Производится конечная настройка созданных бинов (в том числе инициализация и внедрение зависимостей)

    Во втором этапе можно повлиять на настройки BeanDefinition путём реализации интерфейса BeanFactoryPostProcessor и использованием аннотации @Component. (пирмер класс OldCameraRollBFPP - замена внедряемого класса по кастомной аннотации)

    На четвёртом этапе тоже можно внести свою лепту, реализовав интерфейс BeanPostProcessor. (Классы-настройщики Spring всегда будут вызываться раньше, чем реализованные пользователем)

        - postProcessBeforeInitialization – метод, вызываемый до инициализации бина (термин «инициализация» в данном контексте довольно относителен: для Spring это означает вызов пользовательского init-метода, о котором будет рассказано далее). На данном этапе бин создан, и в него уже внедрены зависимости, которые помечены аннотациями Spring (@Autowired, @Value и т.п.).
        - postProcessAfterInitialization – метод, который выполняется после инициализации (после вызова init-метода). После него настроенные бины попадают непосредственно в контейнер бинов.


Жизненный цикл бина:

    Бины Spring обладают жизненным циклом. Фактически, это дает возможность вызывать собственные методы бина на его жизненных этапах. Чтобы подобное стало возможным, необходимо как-то пометить метод и время его вызова. На практике используется несколько подходов.

    Первый подход использует аннотации: (пример в CameraImpl)
    @PostConstruct – метод инициализации, вызываемый после создания объекта и внедрения зависимостей (т.е. между методами postProcessBeforeInitialization и postProcessAfterInitialization интерфейса BeanPostProcessor);
    @PreDestroy – метод, вызываемый перед уничтожением бина.

    Второй подход использует XML-атрибуты тега <bean>:
    init-method;
    destroy-method.

    Применение этих аннотаций возможно благодаря поддержке Spring стандарта JSR-250. Соответственно, для использования @PostConstruct и @PreDestroy необходимо подключать дополнительную зависимость.