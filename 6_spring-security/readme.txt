SPRING-SECURITY

------------
Создание конфигураций

Spring Security предоставляет фильтры для защиты на уровне запросов. Для подключения фильтров используется класс
SecurityWebApplicationInitializer (code.config.security), который просто наследует от класса
AbstractSecurityWebApplicationInitializer.

SecurityConfig (code.config.security) Для настройки Spring Security используется класс конфигурации , который расширяет
класс WebSecurityConfigurerAdapter.

    @EnableGlobalMethodSecurity позволяет использовать аннотации для защиты на уровне методов.

    Конфигурация процесса авторизации и аутентификации определяется в методе configAuthenticaton:
    - dataSource – с помощью данного метода указывается источник данных, из которого Spring Security будет получать
        информацию о пользователях и их уровнях доступа;
    - usersByUserNameQuery – с помощью данного метода указывается запрос для получения информации о пользователе,
        которая будет использоваться для авторизации;
    - authoritiesByUsernameQuery – c помощью данного метода указывается запрос для получения информации о правах
        доступа пользователя.

    В методе configure производится настройка защиты на уровне запросов и конфигурирование процессов авторизации:
    - antMatchers – с помощью данного метода указывается http-метод и URL (или шаблон URL), доступ к которому
        необходимо ограничить;
    - hasAuthority – в нем указывается роль, необходимая пользователю для доступа к данному ресурсу;
    - loginPage – указывается URL формы авторизации;
    - loginProcessingUrl – указывается URL-адрес, на который будут отправляться данные формы(методом POST);
    - usernameParametr и passwordParametr – указываются имена полей формы, которые содержат логин и пароль;
    - failureUrl – необходим для указания адреса, на который будет перенаправляться пользователь при неудачной
        авторизации;
    - logoutSuccessUrl – указывается URL, на который будет перенаправлен пользователь при выходе из аккаунта автора.

------------------
Авторизация

login.jsp (webapp.WEB-INF.views.security)
LoginController (code.controller) - пример обработки запросов login/logout

-------------------
Защита на уровне представлений

Для возможности регистрации и авторизации необходимо добавить ссылки. Но чтобы они были видны пользователям только с
соответствующими правами, необходимо воспользоваться тегами из набора Spring Security.

В атрибуте access тега sec:authorize указывается выражение, которое устанавливает статус или уровень доступа,
необходимый для отображения элемента. Например, выражение «isAnonymous()» означает, что элемент, заключенный в данный
тег, увидят только неавторизированные пользователи, а выражение «isAuthenticated()» означает обратное.

Также в коде используется выражение ${pageContext.request.userPrincipal.name}. C его помощью выводится логин текущего
авторизованного пользователя.

------------------
Защита на уровне методов

Последний шаг для создания надежной защиты приложения – ограничение доступа на уровне методов. Для обеспечения данного
функционала можно использовать аннотацию @PreAuthorized. Объявлять ее можно в интерфейсе, который реализует класс,
содержащий защищенные методы.

Метод изменить таким образом, чтобы информация об авторе бралась из security-контекста:
String currentLogin = SecurityContextHolder.getContext().getAuthentication().getName();


